// store/citySlice.tsimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';import { API_KEY, BASE_URL } from '../utilities/endpoints';import { CityState } from '../types';const initialState: CityState = {  options: [],  isLoading: false,  error: null,};// Async thunk для запиту містexport const fetchCities = createAsyncThunk(  'cities/fetchCities',  async (query: string, { rejectWithValue }) => {    try {      const response = await fetch(        `${BASE_URL}?q=${query}&limit=5&appid=${API_KEY}`,      );      if (!response.ok) {        throw new Error('Failed to fetch cities');      }      const data = await response.json();      return data.map((city: any) => ({        label: `${city.name}, ${city.country}`,        value: city.name,        country: city.country,      }));    } catch (error: any) {      return rejectWithValue(error.message);    }  },);const citySlice = createSlice({  name: 'cities',  initialState,  reducers: {    clearCities(state) {      state.options = [];      state.error = null;    },  },  extraReducers: (builder) => {    builder      .addCase(fetchCities.pending, (state) => {        state.isLoading = true;        state.error = null;      })      .addCase(fetchCities.fulfilled, (state, action) => {        state.isLoading = false;        state.options = action.payload;      })      .addCase(fetchCities.rejected, (state, action) => {        state.isLoading = false;        state.error = action.payload as string;      });  },});export const { clearCities } = citySlice.actions;export default citySlice.reducer;